ea.experiment(
  runs = (randomGenerator = (seed = [1:1:3]) * [ea.rg.defaultRG()]) * [
    ea.run(
      solver = ea.s.intGA(
        mapper = er.m.intStringReactiveGridVSR(
          w = 5;
          h = 5;
          availableVoxels = [
            s.supplier(of = s.a.vsr.rv.aa());
            s.supplier(of = s.a.vsr.rv.asin());
            s.supplier(of = s.a.vsr.rv.asld());
            s.supplier(of = s.a.vsr.rv.at());
            s.supplier(of = s.a.vsr.rv.ph());
            s.supplier(of = s.a.vsr.rv.ps())
          ]
        );
        nEval = 100;
        nPop = 10
      );
      problem = ea.p.totalOrder(
        qFunction = s.taskRunner(task = s.task.locomotion());
        cFunction = s.task.locomotion.xVelocity();
        type = maximize
      )
    )
  ];
  listeners = [
    ea.l.tui(
      functions = [
        ea.nf.size(f = ea.nf.genotype(individual = ea.nf.best()); s = "%5d");
        ea.nf.bestFitness(f = ea.nf.f(outerF = s.task.l.xVelocity(); s = "%5.2f"));
        ea.nf.fitnessHist(f = ea.nf.f(outerF = s.task.l.xVelocity()));
        er.nf.w(f = er.nf.gridBody(f = ea.nf.solution(individual = ea.nf.best())));
        er.nf.h(f = er.nf.gridBody(f = ea.nf.solution(individual = ea.nf.best())));
        er.nf.count(f = er.nf.gridBody(f = ea.nf.solution(individual = ea.nf.best())));
        er.nf.elongation(f = er.nf.gridBody(f = ea.nf.solution(individual = ea.nf.best())));
        er.nf.compactness(f = er.nf.gridBody(f = ea.nf.solution(individual = ea.nf.best())))
      ];
      plots = [
        ea.plot.fitness(x = ea.nf.progress(); f = ea.nf.f(outerF = s.task.l.xVelocity()); sort = max; minY = 0; maxX = 1)
      ]
    )
  ]
)